@using Visionamos.SitiosWeb.Recursos
@using Visionamos.SitiosWeb.Extensiones
@using Visionamos.Operations.DataAccess.ViewModels.EnterpriseSecurity
@using Visionamos.Operations.DataAccess.Models.Integracion
@model ReglasPasswordGrid_UI

@{
    Layout = null;
    app_user app_user = Session["Usuario"] as app_user;
    var permmisions = app_user.perfiles.perfiles_formularios.FirstOrDefault();
    int idFormulario = Convert.ToInt32(Request.QueryString["idFormulario"]);

}

<script>
    function errorHandlerEndGridExtension(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            MensajeError(message, 3000);
            $("#grid").data("kendoGrid").cancelChanges();
        }
    }

    function onRequestStartGridExtension(e) {
        if (e.type == "create") {
            LoadingStart('Un momento por favor.');
        } else if (e.type == "destroy") {
            LoadingStart('Un momento por favor.');
        } else if (e.type == "update") {
            LoadingStart('Un momento por favor.');
        }
        else {
            LoadingStart('Cargando Información.');
        }
    }

    function onRequestEndGridExtension(e) {
        LoadingStop();
        if (e.type == "update" && !e.response.Errors) {
            $("#grid").data("kendoGrid").dataSource.read();
            MensajeSuccess("Solicitud realizada con éxito");
        }

        if (e.type == "create" && !e.response.Errors) {
            $("#grid").data("kendoGrid").dataSource.read();
            MensajeSuccess("Solicitud realizada con éxito");
        }

        if (e.type == "destroy" && !e.response.Errors) {
            MensajeSuccess("Solicitud realizada con éxito");
        }
    }

    function onDeleteEndGridExtension(e) {
        evt = e;
        var dialog = $("<div></div>");

        dialog.kendoDialog({
            width: "350px",
            title: "Confirmación",
            closable: true,
            modal: true,
            content: "<p>¿Está seguro(a), de querer eliminar el registro?<p>",
            actions: [
                { text: 'Cancelar' },
                { text: 'Aceptar', primary: true, action: DeleteGridExtension }
            ]
        });
        dialog.data("kendoDialog").open();
    }

    function DeleteGridExtension() {
        var grid = $("#grid").data("kendoGrid");
        grid.removeRow($(evt.target).closest("tr"));
    }

    function onEdit(e) {
        if (!e.model.isNew()) {
            $("#Code").attr('Disabled', true);
            $("#Description").attr('Disabled', true);
        }

        var entity = $("#comboboxEntidad").val();
        $("#EntityCode").val(entity).change().hide();

        if (e.model.isNew()) {
            $("#Code").val("PED").attr("Disabled", true);
            $("#Description").val("Fecha de vencimiento de la contraseña").attr("Disabled", true);
        }
    }

    function checkInput(e) {
        if (/^[0-9A-Za-zÁ-Ýá-ý ñÑ]+$/gi.test(e.key))
            return;
        e.preventDefault();
        e.stopPropagation();
    }

    function GetFilters() {
        var entities = $("#comboboxEntidad").val();
        return {
            entity: entities
        }
    }

    function filter() {
        UpdateList();
        $(document).ready(function () {
            var entity = $("#comboboxEntidad").val();

            if (entity != null) {
                $("#BtnCreate").show();
            }
            if (entity == null || entity == "") {
                $("#BtnCreate").hide();
            }
        });
    }

    function UpdateList() {
        $("#grid").data("kendoGrid").dataSource.read();
    }    

    $(document).ready(function () {
        if ($("#comboboxEntidad").val() == 0) {
            $("#BtnCreate").hide();
        }
    });
</script>

<style>
    .container-fluid-title {
        display: flex;
        flex-direction: row;
    }

    .title {
        margin: 1rem;
    }

    .comboBox {
        width: 20%;
    }
</style>

<div class="container-fluid-title" style="overflow:auto;padding:1rem">
    <div class="title" style="margin-top:7px">
        @Html.LabelFor(l => l.EntityCode)
    </div>
    <div class="comboBox">
        @(Html.Kendo().ComboBoxFor(m => m)
            .Name("comboboxEntidad")
            .Filter("contains")
            .DataTextField("NAME")
            .DataValueField("CODE")
            .Events(e => e.Change("filter"))
            .Placeholder(WebUiResourceForms.SelectEntity)
            .ValuePrimitive(true)
            .DataSource(source =>
            {
                source.Custom()
                        .ServerFiltering(true)
                        .Type("aspnetmvc-ajax")
                        .Transport(transport =>
                        {
                            transport.Read("Read", "Commerce");
                        })
                        .Schema(schema =>
                        {
                            schema.Data("Data")
                                .Total("Total");
                        });
            }).HtmlAttributes(new { @style = "width: 100%;" })
        )
    </div>
</div>

@(Html.Kendo().Grid<ReglasPasswordGrid_UI>()
    .Name("grid")
    .Events(e =>
    {
        e.Edit("onEdit");
    })
    .ToolBar(toolbar =>
    {
        if (permmisions.accion_new == true)
        {
            toolbar.Create().Text(WebUiResourceForms.Add).HtmlAttributes( new { id = "BtnCreate" });
        }
        toolbar.Excel().Text(WebUiResourceForms.Excel);
        toolbar.Pdf().Text(WebUiResourceForms.PDF);
    })
    .Columns(column =>
    {
        column.Command(command =>
        {
            if (permmisions.accion_update == true)
            {
                command.Edit()
                    .CancelText("Cancelar")
                    .UpdateText(WebUiResourceForms.Acept)
                    .Text(" ")
                    .HtmlAttributes(new { rel = "tooltip", dataToggle = "tooltip", title = "Editar" });
            }

            if (permmisions.accion_delete == true)
            {
                command.Custom("Eliminar")
                    .Click("onDeleteEndGridExtension")
                    .Text("<span class='k-icon k-i-delete'></span>")
                    .HtmlAttributes(new { title = "Eliminar" });
            }

        }).Title(WebUiResourceForms.Actions).HtmlAttributes(new { @style = "text-align:center;" });
    })
    .Columns(column =>
    {
        column.Bound(b => b.Guid).Hidden();
        column.Bound(b => b.EntityName);
        column.Bound(b => b.Code);
        column.Bound(b => b.Description);
        column.Bound(b => b.Value);
    })
    .Selectable()
    .Pageable(p =>
    {
        p.Messages(m => m
        .Display(WebUiResourceForms.Display)
        .Empty(WebUiResourceForms.Empty)
        .First(WebUiResourceForms.First)
        .Last(WebUiResourceForms.Last)
        .Next(WebUiResourceForms.Next)
        .Previous(WebUiResourceForms.Previous)
        .ItemsPerPage(WebUiResourceForms.ItemsPerPage));
        p.Refresh(true);
        p.PageSizes(new int[] { 50, 100, 200, 500, 1000 });
        p.ButtonCount(4);
    })
    .Filterable(filterable =>
    {
        filterable.Messages(m => m
            .Filter(WebUiResourceForms.Filter)
            .Clear(WebUiResourceForms.Clear)
            .Info(WebUiResourceForms.Info));
        filterable.Extra(false);
        filterable.Enabled(true);
        filterable.Operators(operators =>
            operators.ForString(str =>
                str.Clear()
                    .Contains(WebUiResourceForms.Contains)
                    .StartsWith(WebUiResourceForms.StartsWith)
                    .IsEqualTo(WebUiResourceForms.IsEqualTo)
                    .IsNotEqualTo(WebUiResourceForms.IsNotEqualTo)
                    .EndsWith(WebUiResourceForms.EndsWith)
        ));
    })
    .Sortable()
    .Scrollable(s => s.Virtual(true))
    .AutoBind(false)
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(20)
        .ServerOperation(false)
        .Events(events =>
        {
            events.Error("errorHandlerEndGridExtension");
            events.RequestStart("onRequestStartGridExtension");
            events.RequestEnd("onRequestEndGridExtension");
        })
        .Read(read => read.Action("Read", "ReglasPassword").Data("GetFilters"))
        .Create(create => create.Action("Create", "ReglasPassword").Data("GetFilters"))
        .Update(update => update.Action("Update", "ReglasPassword"))
        .Destroy(delete => delete.Action("Delete", "ReglasPassword"))
        .Model(m =>
        {
            m.Id(f => f.Guid);
        })
    )
    .Editable(e => e.Mode(GridEditMode.PopUp).TemplateName("ReglasPassword/EditorTemplateReglasPassword").AdditionalViewData(null)
    .Window(w => w.Width(400).Title(WebUiResourceForms.CreateEdit + " " + WebUiResourceForms.TitleRulesPassword)).DisplayDeleteConfirmation(false))
    .HtmlAttributes(new { @style = "height: 92% !important;" })
)
